// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mail

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockISender creates a new instance of MockISender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockISender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockISender {
	mock := &MockISender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockISender is an autogenerated mock type for the ISender type
type MockISender struct {
	mock.Mock
}

type MockISender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockISender) EXPECT() *MockISender_Expecter {
	return &MockISender_Expecter{mock: &_m.Mock}
}

// SendEmailWithTemplate provides a mock function for the type MockISender
func (_mock *MockISender) SendEmailWithTemplate(to string, subject string, file string, data any) error {
	ret := _mock.Called(to, subject, file, data)

	if len(ret) == 0 {
		panic("no return value specified for SendEmailWithTemplate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, any) error); ok {
		r0 = returnFunc(to, subject, file, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockISender_SendEmailWithTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmailWithTemplate'
type MockISender_SendEmailWithTemplate_Call struct {
	*mock.Call
}

// SendEmailWithTemplate is a helper method to define mock.On call
//   - to string
//   - subject string
//   - file string
//   - data any
func (_e *MockISender_Expecter) SendEmailWithTemplate(to interface{}, subject interface{}, file interface{}, data interface{}) *MockISender_SendEmailWithTemplate_Call {
	return &MockISender_SendEmailWithTemplate_Call{Call: _e.mock.On("SendEmailWithTemplate", to, subject, file, data)}
}

func (_c *MockISender_SendEmailWithTemplate_Call) Run(run func(to string, subject string, file string, data any)) *MockISender_SendEmailWithTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 any
		if args[3] != nil {
			arg3 = args[3].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockISender_SendEmailWithTemplate_Call) Return(err error) *MockISender_SendEmailWithTemplate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockISender_SendEmailWithTemplate_Call) RunAndReturn(run func(to string, subject string, file string, data any) error) *MockISender_SendEmailWithTemplate_Call {
	_c.Call.Return(run)
	return _c
}
