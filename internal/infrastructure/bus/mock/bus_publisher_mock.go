// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package bus

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockBusPublisher creates a new instance of MockBusPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBusPublisher[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBusPublisher[T] {
	mock := &MockBusPublisher[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBusPublisher is an autogenerated mock type for the BusPublisher type
type MockBusPublisher[T any] struct {
	mock.Mock
}

type MockBusPublisher_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockBusPublisher[T]) EXPECT() *MockBusPublisher_Expecter[T] {
	return &MockBusPublisher_Expecter[T]{mock: &_m.Mock}
}

// Publish provides a mock function for the type MockBusPublisher
func (_mock *MockBusPublisher[T]) Publish(topic string, arg T) {
	_mock.Called(topic, arg)
	return
}

// MockBusPublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockBusPublisher_Publish_Call[T any] struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - topic string
//   - arg T
func (_e *MockBusPublisher_Expecter[T]) Publish(topic interface{}, arg interface{}) *MockBusPublisher_Publish_Call[T] {
	return &MockBusPublisher_Publish_Call[T]{Call: _e.mock.On("Publish", topic, arg)}
}

func (_c *MockBusPublisher_Publish_Call[T]) Run(run func(topic string, arg T)) *MockBusPublisher_Publish_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 T
		if args[1] != nil {
			arg1 = args[1].(T)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBusPublisher_Publish_Call[T]) Return() *MockBusPublisher_Publish_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockBusPublisher_Publish_Call[T]) RunAndReturn(run func(topic string, arg T)) *MockBusPublisher_Publish_Call[T] {
	_c.Run(run)
	return _c
}
