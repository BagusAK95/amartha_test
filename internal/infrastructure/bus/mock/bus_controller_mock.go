// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package bus

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockBusController creates a new instance of MockBusController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBusController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBusController {
	mock := &MockBusController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBusController is an autogenerated mock type for the BusController type
type MockBusController struct {
	mock.Mock
}

type MockBusController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBusController) EXPECT() *MockBusController_Expecter {
	return &MockBusController_Expecter{mock: &_m.Mock}
}

// HasCallback provides a mock function for the type MockBusController
func (_mock *MockBusController) HasCallback(topic string) bool {
	ret := _mock.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for HasCallback")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(topic)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockBusController_HasCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasCallback'
type MockBusController_HasCallback_Call struct {
	*mock.Call
}

// HasCallback is a helper method to define mock.On call
//   - topic string
func (_e *MockBusController_Expecter) HasCallback(topic interface{}) *MockBusController_HasCallback_Call {
	return &MockBusController_HasCallback_Call{Call: _e.mock.On("HasCallback", topic)}
}

func (_c *MockBusController_HasCallback_Call) Run(run func(topic string)) *MockBusController_HasCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBusController_HasCallback_Call) Return(b bool) *MockBusController_HasCallback_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockBusController_HasCallback_Call) RunAndReturn(run func(topic string) bool) *MockBusController_HasCallback_Call {
	_c.Call.Return(run)
	return _c
}

// WaitAsync provides a mock function for the type MockBusController
func (_mock *MockBusController) WaitAsync() {
	_mock.Called()
	return
}

// MockBusController_WaitAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitAsync'
type MockBusController_WaitAsync_Call struct {
	*mock.Call
}

// WaitAsync is a helper method to define mock.On call
func (_e *MockBusController_Expecter) WaitAsync() *MockBusController_WaitAsync_Call {
	return &MockBusController_WaitAsync_Call{Call: _e.mock.On("WaitAsync")}
}

func (_c *MockBusController_WaitAsync_Call) Run(run func()) *MockBusController_WaitAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBusController_WaitAsync_Call) Return() *MockBusController_WaitAsync_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBusController_WaitAsync_Call) RunAndReturn(run func()) *MockBusController_WaitAsync_Call {
	_c.Run(run)
	return _c
}
