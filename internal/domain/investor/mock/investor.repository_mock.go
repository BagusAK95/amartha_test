// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package investor

import (
	"context"

	"github.com/BagusAK95/amarta_test/internal/domain/common/repository"
	"github.com/BagusAK95/amarta_test/internal/domain/investor"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
	"gorm.io/gorm"
)

// NewMockIInvestorRepository creates a new instance of MockIInvestorRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIInvestorRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIInvestorRepository {
	mock := &MockIInvestorRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIInvestorRepository is an autogenerated mock type for the IInvestorRepository type
type MockIInvestorRepository struct {
	mock.Mock
}

type MockIInvestorRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIInvestorRepository) EXPECT() *MockIInvestorRepository_Expecter {
	return &MockIInvestorRepository_Expecter{mock: &_m.Mock}
}

// BeginTransaction provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) BeginTransaction(ctx context.Context) *gorm.DB {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTransaction")
	}

	var r0 *gorm.DB
	if returnFunc, ok := ret.Get(0).(func(context.Context) *gorm.DB); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}
	return r0
}

// MockIInvestorRepository_BeginTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTransaction'
type MockIInvestorRepository_BeginTransaction_Call struct {
	*mock.Call
}

// BeginTransaction is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIInvestorRepository_Expecter) BeginTransaction(ctx interface{}) *MockIInvestorRepository_BeginTransaction_Call {
	return &MockIInvestorRepository_BeginTransaction_Call{Call: _e.mock.On("BeginTransaction", ctx)}
}

func (_c *MockIInvestorRepository_BeginTransaction_Call) Run(run func(ctx context.Context)) *MockIInvestorRepository_BeginTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_BeginTransaction_Call) Return(dB *gorm.DB) *MockIInvestorRepository_BeginTransaction_Call {
	_c.Call.Return(dB)
	return _c
}

func (_c *MockIInvestorRepository_BeginTransaction_Call) RunAndReturn(run func(ctx context.Context) *gorm.DB) *MockIInvestorRepository_BeginTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) Commit(trx *gorm.DB) *gorm.DB {
	ret := _mock.Called(trx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 *gorm.DB
	if returnFunc, ok := ret.Get(0).(func(*gorm.DB) *gorm.DB); ok {
		r0 = returnFunc(trx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}
	return r0
}

// MockIInvestorRepository_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockIInvestorRepository_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - trx *gorm.DB
func (_e *MockIInvestorRepository_Expecter) Commit(trx interface{}) *MockIInvestorRepository_Commit_Call {
	return &MockIInvestorRepository_Commit_Call{Call: _e.mock.On("Commit", trx)}
}

func (_c *MockIInvestorRepository_Commit_Call) Run(run func(trx *gorm.DB)) *MockIInvestorRepository_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gorm.DB
		if args[0] != nil {
			arg0 = args[0].(*gorm.DB)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_Commit_Call) Return(dB *gorm.DB) *MockIInvestorRepository_Commit_Call {
	_c.Call.Return(dB)
	return _c
}

func (_c *MockIInvestorRepository_Commit_Call) RunAndReturn(run func(trx *gorm.DB) *gorm.DB) *MockIInvestorRepository_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) Create(ctx context.Context, model investor.Investor) (investor.Investor, error) {
	ret := _mock.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 investor.Investor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, investor.Investor) (investor.Investor, error)); ok {
		return returnFunc(ctx, model)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, investor.Investor) investor.Investor); ok {
		r0 = returnFunc(ctx, model)
	} else {
		r0 = ret.Get(0).(investor.Investor)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, investor.Investor) error); ok {
		r1 = returnFunc(ctx, model)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIInvestorRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIInvestorRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - model investor.Investor
func (_e *MockIInvestorRepository_Expecter) Create(ctx interface{}, model interface{}) *MockIInvestorRepository_Create_Call {
	return &MockIInvestorRepository_Create_Call{Call: _e.mock.On("Create", ctx, model)}
}

func (_c *MockIInvestorRepository_Create_Call) Run(run func(ctx context.Context, model investor.Investor)) *MockIInvestorRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 investor.Investor
		if args[1] != nil {
			arg1 = args[1].(investor.Investor)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_Create_Call) Return(investor1 investor.Investor, err error) *MockIInvestorRepository_Create_Call {
	_c.Call.Return(investor1, err)
	return _c
}

func (_c *MockIInvestorRepository_Create_Call) RunAndReturn(run func(ctx context.Context, model investor.Investor) (investor.Investor, error)) *MockIInvestorRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulk provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) CreateBulk(ctx context.Context, models []investor.Investor) error {
	ret := _mock.Called(ctx, models)

	if len(ret) == 0 {
		panic("no return value specified for CreateBulk")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []investor.Investor) error); ok {
		r0 = returnFunc(ctx, models)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIInvestorRepository_CreateBulk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulk'
type MockIInvestorRepository_CreateBulk_Call struct {
	*mock.Call
}

// CreateBulk is a helper method to define mock.On call
//   - ctx context.Context
//   - models []investor.Investor
func (_e *MockIInvestorRepository_Expecter) CreateBulk(ctx interface{}, models interface{}) *MockIInvestorRepository_CreateBulk_Call {
	return &MockIInvestorRepository_CreateBulk_Call{Call: _e.mock.On("CreateBulk", ctx, models)}
}

func (_c *MockIInvestorRepository_CreateBulk_Call) Run(run func(ctx context.Context, models []investor.Investor)) *MockIInvestorRepository_CreateBulk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []investor.Investor
		if args[1] != nil {
			arg1 = args[1].([]investor.Investor)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_CreateBulk_Call) Return(err error) *MockIInvestorRepository_CreateBulk_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIInvestorRepository_CreateBulk_Call) RunAndReturn(run func(ctx context.Context, models []investor.Investor) error) *MockIInvestorRepository_CreateBulk_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkAndReturnWithTx provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) CreateBulkAndReturnWithTx(ctx context.Context, models []investor.Investor, trx *gorm.DB) ([]investor.Investor, error) {
	ret := _mock.Called(ctx, models, trx)

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkAndReturnWithTx")
	}

	var r0 []investor.Investor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []investor.Investor, *gorm.DB) ([]investor.Investor, error)); ok {
		return returnFunc(ctx, models, trx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []investor.Investor, *gorm.DB) []investor.Investor); ok {
		r0 = returnFunc(ctx, models, trx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]investor.Investor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []investor.Investor, *gorm.DB) error); ok {
		r1 = returnFunc(ctx, models, trx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIInvestorRepository_CreateBulkAndReturnWithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkAndReturnWithTx'
type MockIInvestorRepository_CreateBulkAndReturnWithTx_Call struct {
	*mock.Call
}

// CreateBulkAndReturnWithTx is a helper method to define mock.On call
//   - ctx context.Context
//   - models []investor.Investor
//   - trx *gorm.DB
func (_e *MockIInvestorRepository_Expecter) CreateBulkAndReturnWithTx(ctx interface{}, models interface{}, trx interface{}) *MockIInvestorRepository_CreateBulkAndReturnWithTx_Call {
	return &MockIInvestorRepository_CreateBulkAndReturnWithTx_Call{Call: _e.mock.On("CreateBulkAndReturnWithTx", ctx, models, trx)}
}

func (_c *MockIInvestorRepository_CreateBulkAndReturnWithTx_Call) Run(run func(ctx context.Context, models []investor.Investor, trx *gorm.DB)) *MockIInvestorRepository_CreateBulkAndReturnWithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []investor.Investor
		if args[1] != nil {
			arg1 = args[1].([]investor.Investor)
		}
		var arg2 *gorm.DB
		if args[2] != nil {
			arg2 = args[2].(*gorm.DB)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_CreateBulkAndReturnWithTx_Call) Return(investors []investor.Investor, err error) *MockIInvestorRepository_CreateBulkAndReturnWithTx_Call {
	_c.Call.Return(investors, err)
	return _c
}

func (_c *MockIInvestorRepository_CreateBulkAndReturnWithTx_Call) RunAndReturn(run func(ctx context.Context, models []investor.Investor, trx *gorm.DB) ([]investor.Investor, error)) *MockIInvestorRepository_CreateBulkAndReturnWithTx_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulkWithTx provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) CreateBulkWithTx(ctx context.Context, models []investor.Investor, trx *gorm.DB) error {
	ret := _mock.Called(ctx, models, trx)

	if len(ret) == 0 {
		panic("no return value specified for CreateBulkWithTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []investor.Investor, *gorm.DB) error); ok {
		r0 = returnFunc(ctx, models, trx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIInvestorRepository_CreateBulkWithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulkWithTx'
type MockIInvestorRepository_CreateBulkWithTx_Call struct {
	*mock.Call
}

// CreateBulkWithTx is a helper method to define mock.On call
//   - ctx context.Context
//   - models []investor.Investor
//   - trx *gorm.DB
func (_e *MockIInvestorRepository_Expecter) CreateBulkWithTx(ctx interface{}, models interface{}, trx interface{}) *MockIInvestorRepository_CreateBulkWithTx_Call {
	return &MockIInvestorRepository_CreateBulkWithTx_Call{Call: _e.mock.On("CreateBulkWithTx", ctx, models, trx)}
}

func (_c *MockIInvestorRepository_CreateBulkWithTx_Call) Run(run func(ctx context.Context, models []investor.Investor, trx *gorm.DB)) *MockIInvestorRepository_CreateBulkWithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []investor.Investor
		if args[1] != nil {
			arg1 = args[1].([]investor.Investor)
		}
		var arg2 *gorm.DB
		if args[2] != nil {
			arg2 = args[2].(*gorm.DB)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_CreateBulkWithTx_Call) Return(err error) *MockIInvestorRepository_CreateBulkWithTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIInvestorRepository_CreateBulkWithTx_Call) RunAndReturn(run func(ctx context.Context, models []investor.Investor, trx *gorm.DB) error) *MockIInvestorRepository_CreateBulkWithTx_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWithTx provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) CreateWithTx(ctx context.Context, model investor.Investor, trx *gorm.DB) (investor.Investor, error) {
	ret := _mock.Called(ctx, model, trx)

	if len(ret) == 0 {
		panic("no return value specified for CreateWithTx")
	}

	var r0 investor.Investor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, investor.Investor, *gorm.DB) (investor.Investor, error)); ok {
		return returnFunc(ctx, model, trx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, investor.Investor, *gorm.DB) investor.Investor); ok {
		r0 = returnFunc(ctx, model, trx)
	} else {
		r0 = ret.Get(0).(investor.Investor)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, investor.Investor, *gorm.DB) error); ok {
		r1 = returnFunc(ctx, model, trx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIInvestorRepository_CreateWithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWithTx'
type MockIInvestorRepository_CreateWithTx_Call struct {
	*mock.Call
}

// CreateWithTx is a helper method to define mock.On call
//   - ctx context.Context
//   - model investor.Investor
//   - trx *gorm.DB
func (_e *MockIInvestorRepository_Expecter) CreateWithTx(ctx interface{}, model interface{}, trx interface{}) *MockIInvestorRepository_CreateWithTx_Call {
	return &MockIInvestorRepository_CreateWithTx_Call{Call: _e.mock.On("CreateWithTx", ctx, model, trx)}
}

func (_c *MockIInvestorRepository_CreateWithTx_Call) Run(run func(ctx context.Context, model investor.Investor, trx *gorm.DB)) *MockIInvestorRepository_CreateWithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 investor.Investor
		if args[1] != nil {
			arg1 = args[1].(investor.Investor)
		}
		var arg2 *gorm.DB
		if args[2] != nil {
			arg2 = args[2].(*gorm.DB)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_CreateWithTx_Call) Return(investor1 investor.Investor, err error) *MockIInvestorRepository_CreateWithTx_Call {
	_c.Call.Return(investor1, err)
	return _c
}

func (_c *MockIInvestorRepository_CreateWithTx_Call) RunAndReturn(run func(ctx context.Context, model investor.Investor, trx *gorm.DB) (investor.Investor, error)) *MockIInvestorRepository_CreateWithTx_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) Delete(ctx context.Context, ID uuid.UUID) error {
	ret := _mock.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIInvestorRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockIInvestorRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
func (_e *MockIInvestorRepository_Expecter) Delete(ctx interface{}, ID interface{}) *MockIInvestorRepository_Delete_Call {
	return &MockIInvestorRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, ID)}
}

func (_c *MockIInvestorRepository_Delete_Call) Run(run func(ctx context.Context, ID uuid.UUID)) *MockIInvestorRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_Delete_Call) Return(err error) *MockIInvestorRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIInvestorRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, ID uuid.UUID) error) *MockIInvestorRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBulk provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) DeleteBulk(ctx context.Context, IDs []uuid.UUID) error {
	ret := _mock.Called(ctx, IDs)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBulk")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) error); ok {
		r0 = returnFunc(ctx, IDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIInvestorRepository_DeleteBulk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBulk'
type MockIInvestorRepository_DeleteBulk_Call struct {
	*mock.Call
}

// DeleteBulk is a helper method to define mock.On call
//   - ctx context.Context
//   - IDs []uuid.UUID
func (_e *MockIInvestorRepository_Expecter) DeleteBulk(ctx interface{}, IDs interface{}) *MockIInvestorRepository_DeleteBulk_Call {
	return &MockIInvestorRepository_DeleteBulk_Call{Call: _e.mock.On("DeleteBulk", ctx, IDs)}
}

func (_c *MockIInvestorRepository_DeleteBulk_Call) Run(run func(ctx context.Context, IDs []uuid.UUID)) *MockIInvestorRepository_DeleteBulk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []uuid.UUID
		if args[1] != nil {
			arg1 = args[1].([]uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_DeleteBulk_Call) Return(err error) *MockIInvestorRepository_DeleteBulk_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIInvestorRepository_DeleteBulk_Call) RunAndReturn(run func(ctx context.Context, IDs []uuid.UUID) error) *MockIInvestorRepository_DeleteBulk_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBulkWithTx provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) DeleteBulkWithTx(ctx context.Context, IDs []uuid.UUID, trx *gorm.DB) error {
	ret := _mock.Called(ctx, IDs, trx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBulkWithTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID, *gorm.DB) error); ok {
		r0 = returnFunc(ctx, IDs, trx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIInvestorRepository_DeleteBulkWithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBulkWithTx'
type MockIInvestorRepository_DeleteBulkWithTx_Call struct {
	*mock.Call
}

// DeleteBulkWithTx is a helper method to define mock.On call
//   - ctx context.Context
//   - IDs []uuid.UUID
//   - trx *gorm.DB
func (_e *MockIInvestorRepository_Expecter) DeleteBulkWithTx(ctx interface{}, IDs interface{}, trx interface{}) *MockIInvestorRepository_DeleteBulkWithTx_Call {
	return &MockIInvestorRepository_DeleteBulkWithTx_Call{Call: _e.mock.On("DeleteBulkWithTx", ctx, IDs, trx)}
}

func (_c *MockIInvestorRepository_DeleteBulkWithTx_Call) Run(run func(ctx context.Context, IDs []uuid.UUID, trx *gorm.DB)) *MockIInvestorRepository_DeleteBulkWithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []uuid.UUID
		if args[1] != nil {
			arg1 = args[1].([]uuid.UUID)
		}
		var arg2 *gorm.DB
		if args[2] != nil {
			arg2 = args[2].(*gorm.DB)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_DeleteBulkWithTx_Call) Return(err error) *MockIInvestorRepository_DeleteBulkWithTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIInvestorRepository_DeleteBulkWithTx_Call) RunAndReturn(run func(ctx context.Context, IDs []uuid.UUID, trx *gorm.DB) error) *MockIInvestorRepository_DeleteBulkWithTx_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWithTx provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) DeleteWithTx(ctx context.Context, ID uuid.UUID, trx *gorm.DB) error {
	ret := _mock.Called(ctx, ID, trx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWithTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *gorm.DB) error); ok {
		r0 = returnFunc(ctx, ID, trx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIInvestorRepository_DeleteWithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWithTx'
type MockIInvestorRepository_DeleteWithTx_Call struct {
	*mock.Call
}

// DeleteWithTx is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
//   - trx *gorm.DB
func (_e *MockIInvestorRepository_Expecter) DeleteWithTx(ctx interface{}, ID interface{}, trx interface{}) *MockIInvestorRepository_DeleteWithTx_Call {
	return &MockIInvestorRepository_DeleteWithTx_Call{Call: _e.mock.On("DeleteWithTx", ctx, ID, trx)}
}

func (_c *MockIInvestorRepository_DeleteWithTx_Call) Run(run func(ctx context.Context, ID uuid.UUID, trx *gorm.DB)) *MockIInvestorRepository_DeleteWithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *gorm.DB
		if args[2] != nil {
			arg2 = args[2].(*gorm.DB)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_DeleteWithTx_Call) Return(err error) *MockIInvestorRepository_DeleteWithTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIInvestorRepository_DeleteWithTx_Call) RunAndReturn(run func(ctx context.Context, ID uuid.UUID, trx *gorm.DB) error) *MockIInvestorRepository_DeleteWithTx_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) GetAll(ctx context.Context) ([]investor.Investor, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []investor.Investor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]investor.Investor, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []investor.Investor); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]investor.Investor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIInvestorRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockIInvestorRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIInvestorRepository_Expecter) GetAll(ctx interface{}) *MockIInvestorRepository_GetAll_Call {
	return &MockIInvestorRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockIInvestorRepository_GetAll_Call) Run(run func(ctx context.Context)) *MockIInvestorRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_GetAll_Call) Return(investors []investor.Investor, err error) *MockIInvestorRepository_GetAll_Call {
	_c.Call.Return(investors, err)
	return _c
}

func (_c *MockIInvestorRepository_GetAll_Call) RunAndReturn(run func(ctx context.Context) ([]investor.Investor, error)) *MockIInvestorRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) GetByID(ctx context.Context, ID uuid.UUID) (investor.Investor, error) {
	ret := _mock.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 investor.Investor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (investor.Investor, error)); ok {
		return returnFunc(ctx, ID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) investor.Investor); ok {
		r0 = returnFunc(ctx, ID)
	} else {
		r0 = ret.Get(0).(investor.Investor)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIInvestorRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockIInvestorRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
func (_e *MockIInvestorRepository_Expecter) GetByID(ctx interface{}, ID interface{}) *MockIInvestorRepository_GetByID_Call {
	return &MockIInvestorRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, ID)}
}

func (_c *MockIInvestorRepository_GetByID_Call) Run(run func(ctx context.Context, ID uuid.UUID)) *MockIInvestorRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_GetByID_Call) Return(investor1 investor.Investor, err error) *MockIInvestorRepository_GetByID_Call {
	_c.Call.Return(investor1, err)
	return _c
}

func (_c *MockIInvestorRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, ID uuid.UUID) (investor.Investor, error)) *MockIInvestorRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIDLockTx provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) GetByIDLockTx(ctx context.Context, ID uuid.UUID, trx *gorm.DB) (investor.Investor, error) {
	ret := _mock.Called(ctx, ID, trx)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDLockTx")
	}

	var r0 investor.Investor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *gorm.DB) (investor.Investor, error)); ok {
		return returnFunc(ctx, ID, trx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *gorm.DB) investor.Investor); ok {
		r0 = returnFunc(ctx, ID, trx)
	} else {
		r0 = ret.Get(0).(investor.Investor)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *gorm.DB) error); ok {
		r1 = returnFunc(ctx, ID, trx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIInvestorRepository_GetByIDLockTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIDLockTx'
type MockIInvestorRepository_GetByIDLockTx_Call struct {
	*mock.Call
}

// GetByIDLockTx is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
//   - trx *gorm.DB
func (_e *MockIInvestorRepository_Expecter) GetByIDLockTx(ctx interface{}, ID interface{}, trx interface{}) *MockIInvestorRepository_GetByIDLockTx_Call {
	return &MockIInvestorRepository_GetByIDLockTx_Call{Call: _e.mock.On("GetByIDLockTx", ctx, ID, trx)}
}

func (_c *MockIInvestorRepository_GetByIDLockTx_Call) Run(run func(ctx context.Context, ID uuid.UUID, trx *gorm.DB)) *MockIInvestorRepository_GetByIDLockTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *gorm.DB
		if args[2] != nil {
			arg2 = args[2].(*gorm.DB)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_GetByIDLockTx_Call) Return(investor1 investor.Investor, err error) *MockIInvestorRepository_GetByIDLockTx_Call {
	_c.Call.Return(investor1, err)
	return _c
}

func (_c *MockIInvestorRepository_GetByIDLockTx_Call) RunAndReturn(run func(ctx context.Context, ID uuid.UUID, trx *gorm.DB) (investor.Investor, error)) *MockIInvestorRepository_GetByIDLockTx_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIDs provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) GetByIDs(ctx context.Context, IDs []uuid.UUID) ([]investor.Investor, error) {
	ret := _mock.Called(ctx, IDs)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDs")
	}

	var r0 []investor.Investor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]investor.Investor, error)); ok {
		return returnFunc(ctx, IDs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []investor.Investor); ok {
		r0 = returnFunc(ctx, IDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]investor.Investor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = returnFunc(ctx, IDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIInvestorRepository_GetByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIDs'
type MockIInvestorRepository_GetByIDs_Call struct {
	*mock.Call
}

// GetByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - IDs []uuid.UUID
func (_e *MockIInvestorRepository_Expecter) GetByIDs(ctx interface{}, IDs interface{}) *MockIInvestorRepository_GetByIDs_Call {
	return &MockIInvestorRepository_GetByIDs_Call{Call: _e.mock.On("GetByIDs", ctx, IDs)}
}

func (_c *MockIInvestorRepository_GetByIDs_Call) Run(run func(ctx context.Context, IDs []uuid.UUID)) *MockIInvestorRepository_GetByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []uuid.UUID
		if args[1] != nil {
			arg1 = args[1].([]uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_GetByIDs_Call) Return(investors []investor.Investor, err error) *MockIInvestorRepository_GetByIDs_Call {
	_c.Call.Return(investors, err)
	return _c
}

func (_c *MockIInvestorRepository_GetByIDs_Call) RunAndReturn(run func(ctx context.Context, IDs []uuid.UUID) ([]investor.Investor, error)) *MockIInvestorRepository_GetByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// Pagination provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) Pagination(ctx context.Context, filter map[string]any, page int, limit int) (repository.Pagination[investor.Investor], error) {
	ret := _mock.Called(ctx, filter, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for Pagination")
	}

	var r0 repository.Pagination[investor.Investor]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, map[string]any, int, int) (repository.Pagination[investor.Investor], error)); ok {
		return returnFunc(ctx, filter, page, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, map[string]any, int, int) repository.Pagination[investor.Investor]); ok {
		r0 = returnFunc(ctx, filter, page, limit)
	} else {
		r0 = ret.Get(0).(repository.Pagination[investor.Investor])
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, map[string]any, int, int) error); ok {
		r1 = returnFunc(ctx, filter, page, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIInvestorRepository_Pagination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pagination'
type MockIInvestorRepository_Pagination_Call struct {
	*mock.Call
}

// Pagination is a helper method to define mock.On call
//   - ctx context.Context
//   - filter map[string]any
//   - page int
//   - limit int
func (_e *MockIInvestorRepository_Expecter) Pagination(ctx interface{}, filter interface{}, page interface{}, limit interface{}) *MockIInvestorRepository_Pagination_Call {
	return &MockIInvestorRepository_Pagination_Call{Call: _e.mock.On("Pagination", ctx, filter, page, limit)}
}

func (_c *MockIInvestorRepository_Pagination_Call) Run(run func(ctx context.Context, filter map[string]any, page int, limit int)) *MockIInvestorRepository_Pagination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 map[string]any
		if args[1] != nil {
			arg1 = args[1].(map[string]any)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_Pagination_Call) Return(res repository.Pagination[investor.Investor], err error) *MockIInvestorRepository_Pagination_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockIInvestorRepository_Pagination_Call) RunAndReturn(run func(ctx context.Context, filter map[string]any, page int, limit int) (repository.Pagination[investor.Investor], error)) *MockIInvestorRepository_Pagination_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) Rollback(trx *gorm.DB) *gorm.DB {
	ret := _mock.Called(trx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 *gorm.DB
	if returnFunc, ok := ret.Get(0).(func(*gorm.DB) *gorm.DB); ok {
		r0 = returnFunc(trx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}
	return r0
}

// MockIInvestorRepository_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockIInvestorRepository_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - trx *gorm.DB
func (_e *MockIInvestorRepository_Expecter) Rollback(trx interface{}) *MockIInvestorRepository_Rollback_Call {
	return &MockIInvestorRepository_Rollback_Call{Call: _e.mock.On("Rollback", trx)}
}

func (_c *MockIInvestorRepository_Rollback_Call) Run(run func(trx *gorm.DB)) *MockIInvestorRepository_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gorm.DB
		if args[0] != nil {
			arg0 = args[0].(*gorm.DB)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_Rollback_Call) Return(dB *gorm.DB) *MockIInvestorRepository_Rollback_Call {
	_c.Call.Return(dB)
	return _c
}

func (_c *MockIInvestorRepository_Rollback_Call) RunAndReturn(run func(trx *gorm.DB) *gorm.DB) *MockIInvestorRepository_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) Update(ctx context.Context, ID uuid.UUID, model investor.Investor) (investor.Investor, error) {
	ret := _mock.Called(ctx, ID, model)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 investor.Investor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, investor.Investor) (investor.Investor, error)); ok {
		return returnFunc(ctx, ID, model)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, investor.Investor) investor.Investor); ok {
		r0 = returnFunc(ctx, ID, model)
	} else {
		r0 = ret.Get(0).(investor.Investor)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, investor.Investor) error); ok {
		r1 = returnFunc(ctx, ID, model)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIInvestorRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockIInvestorRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
//   - model investor.Investor
func (_e *MockIInvestorRepository_Expecter) Update(ctx interface{}, ID interface{}, model interface{}) *MockIInvestorRepository_Update_Call {
	return &MockIInvestorRepository_Update_Call{Call: _e.mock.On("Update", ctx, ID, model)}
}

func (_c *MockIInvestorRepository_Update_Call) Run(run func(ctx context.Context, ID uuid.UUID, model investor.Investor)) *MockIInvestorRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 investor.Investor
		if args[2] != nil {
			arg2 = args[2].(investor.Investor)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_Update_Call) Return(investor1 investor.Investor, err error) *MockIInvestorRepository_Update_Call {
	_c.Call.Return(investor1, err)
	return _c
}

func (_c *MockIInvestorRepository_Update_Call) RunAndReturn(run func(ctx context.Context, ID uuid.UUID, model investor.Investor) (investor.Investor, error)) *MockIInvestorRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBulk provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) UpdateBulk(ctx context.Context, IDs []uuid.UUID, payload map[string]any) error {
	ret := _mock.Called(ctx, IDs, payload)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBulk")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID, map[string]any) error); ok {
		r0 = returnFunc(ctx, IDs, payload)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIInvestorRepository_UpdateBulk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBulk'
type MockIInvestorRepository_UpdateBulk_Call struct {
	*mock.Call
}

// UpdateBulk is a helper method to define mock.On call
//   - ctx context.Context
//   - IDs []uuid.UUID
//   - payload map[string]any
func (_e *MockIInvestorRepository_Expecter) UpdateBulk(ctx interface{}, IDs interface{}, payload interface{}) *MockIInvestorRepository_UpdateBulk_Call {
	return &MockIInvestorRepository_UpdateBulk_Call{Call: _e.mock.On("UpdateBulk", ctx, IDs, payload)}
}

func (_c *MockIInvestorRepository_UpdateBulk_Call) Run(run func(ctx context.Context, IDs []uuid.UUID, payload map[string]any)) *MockIInvestorRepository_UpdateBulk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []uuid.UUID
		if args[1] != nil {
			arg1 = args[1].([]uuid.UUID)
		}
		var arg2 map[string]any
		if args[2] != nil {
			arg2 = args[2].(map[string]any)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_UpdateBulk_Call) Return(err error) *MockIInvestorRepository_UpdateBulk_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIInvestorRepository_UpdateBulk_Call) RunAndReturn(run func(ctx context.Context, IDs []uuid.UUID, payload map[string]any) error) *MockIInvestorRepository_UpdateBulk_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBulkWithTx provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) UpdateBulkWithTx(ctx context.Context, IDs []uuid.UUID, payload map[string]any, trx *gorm.DB) error {
	ret := _mock.Called(ctx, IDs, payload, trx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBulkWithTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID, map[string]any, *gorm.DB) error); ok {
		r0 = returnFunc(ctx, IDs, payload, trx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIInvestorRepository_UpdateBulkWithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBulkWithTx'
type MockIInvestorRepository_UpdateBulkWithTx_Call struct {
	*mock.Call
}

// UpdateBulkWithTx is a helper method to define mock.On call
//   - ctx context.Context
//   - IDs []uuid.UUID
//   - payload map[string]any
//   - trx *gorm.DB
func (_e *MockIInvestorRepository_Expecter) UpdateBulkWithTx(ctx interface{}, IDs interface{}, payload interface{}, trx interface{}) *MockIInvestorRepository_UpdateBulkWithTx_Call {
	return &MockIInvestorRepository_UpdateBulkWithTx_Call{Call: _e.mock.On("UpdateBulkWithTx", ctx, IDs, payload, trx)}
}

func (_c *MockIInvestorRepository_UpdateBulkWithTx_Call) Run(run func(ctx context.Context, IDs []uuid.UUID, payload map[string]any, trx *gorm.DB)) *MockIInvestorRepository_UpdateBulkWithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []uuid.UUID
		if args[1] != nil {
			arg1 = args[1].([]uuid.UUID)
		}
		var arg2 map[string]any
		if args[2] != nil {
			arg2 = args[2].(map[string]any)
		}
		var arg3 *gorm.DB
		if args[3] != nil {
			arg3 = args[3].(*gorm.DB)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_UpdateBulkWithTx_Call) Return(err error) *MockIInvestorRepository_UpdateBulkWithTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIInvestorRepository_UpdateBulkWithTx_Call) RunAndReturn(run func(ctx context.Context, IDs []uuid.UUID, payload map[string]any, trx *gorm.DB) error) *MockIInvestorRepository_UpdateBulkWithTx_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWithMap provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) UpdateWithMap(ctx context.Context, ID uuid.UUID, payload map[string]any) (investor.Investor, error) {
	ret := _mock.Called(ctx, ID, payload)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWithMap")
	}

	var r0 investor.Investor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, map[string]any) (investor.Investor, error)); ok {
		return returnFunc(ctx, ID, payload)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, map[string]any) investor.Investor); ok {
		r0 = returnFunc(ctx, ID, payload)
	} else {
		r0 = ret.Get(0).(investor.Investor)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, map[string]any) error); ok {
		r1 = returnFunc(ctx, ID, payload)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIInvestorRepository_UpdateWithMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWithMap'
type MockIInvestorRepository_UpdateWithMap_Call struct {
	*mock.Call
}

// UpdateWithMap is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
//   - payload map[string]any
func (_e *MockIInvestorRepository_Expecter) UpdateWithMap(ctx interface{}, ID interface{}, payload interface{}) *MockIInvestorRepository_UpdateWithMap_Call {
	return &MockIInvestorRepository_UpdateWithMap_Call{Call: _e.mock.On("UpdateWithMap", ctx, ID, payload)}
}

func (_c *MockIInvestorRepository_UpdateWithMap_Call) Run(run func(ctx context.Context, ID uuid.UUID, payload map[string]any)) *MockIInvestorRepository_UpdateWithMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 map[string]any
		if args[2] != nil {
			arg2 = args[2].(map[string]any)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_UpdateWithMap_Call) Return(investor1 investor.Investor, err error) *MockIInvestorRepository_UpdateWithMap_Call {
	_c.Call.Return(investor1, err)
	return _c
}

func (_c *MockIInvestorRepository_UpdateWithMap_Call) RunAndReturn(run func(ctx context.Context, ID uuid.UUID, payload map[string]any) (investor.Investor, error)) *MockIInvestorRepository_UpdateWithMap_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWithMapTx provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) UpdateWithMapTx(ctx context.Context, ID uuid.UUID, payload map[string]any, trx *gorm.DB) (investor.Investor, error) {
	ret := _mock.Called(ctx, ID, payload, trx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWithMapTx")
	}

	var r0 investor.Investor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, map[string]any, *gorm.DB) (investor.Investor, error)); ok {
		return returnFunc(ctx, ID, payload, trx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, map[string]any, *gorm.DB) investor.Investor); ok {
		r0 = returnFunc(ctx, ID, payload, trx)
	} else {
		r0 = ret.Get(0).(investor.Investor)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, map[string]any, *gorm.DB) error); ok {
		r1 = returnFunc(ctx, ID, payload, trx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIInvestorRepository_UpdateWithMapTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWithMapTx'
type MockIInvestorRepository_UpdateWithMapTx_Call struct {
	*mock.Call
}

// UpdateWithMapTx is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
//   - payload map[string]any
//   - trx *gorm.DB
func (_e *MockIInvestorRepository_Expecter) UpdateWithMapTx(ctx interface{}, ID interface{}, payload interface{}, trx interface{}) *MockIInvestorRepository_UpdateWithMapTx_Call {
	return &MockIInvestorRepository_UpdateWithMapTx_Call{Call: _e.mock.On("UpdateWithMapTx", ctx, ID, payload, trx)}
}

func (_c *MockIInvestorRepository_UpdateWithMapTx_Call) Run(run func(ctx context.Context, ID uuid.UUID, payload map[string]any, trx *gorm.DB)) *MockIInvestorRepository_UpdateWithMapTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 map[string]any
		if args[2] != nil {
			arg2 = args[2].(map[string]any)
		}
		var arg3 *gorm.DB
		if args[3] != nil {
			arg3 = args[3].(*gorm.DB)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_UpdateWithMapTx_Call) Return(investor1 investor.Investor, err error) *MockIInvestorRepository_UpdateWithMapTx_Call {
	_c.Call.Return(investor1, err)
	return _c
}

func (_c *MockIInvestorRepository_UpdateWithMapTx_Call) RunAndReturn(run func(ctx context.Context, ID uuid.UUID, payload map[string]any, trx *gorm.DB) (investor.Investor, error)) *MockIInvestorRepository_UpdateWithMapTx_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWithTx provides a mock function for the type MockIInvestorRepository
func (_mock *MockIInvestorRepository) UpdateWithTx(ctx context.Context, ID uuid.UUID, model investor.Investor, trx *gorm.DB) (investor.Investor, error) {
	ret := _mock.Called(ctx, ID, model, trx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWithTx")
	}

	var r0 investor.Investor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, investor.Investor, *gorm.DB) (investor.Investor, error)); ok {
		return returnFunc(ctx, ID, model, trx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, investor.Investor, *gorm.DB) investor.Investor); ok {
		r0 = returnFunc(ctx, ID, model, trx)
	} else {
		r0 = ret.Get(0).(investor.Investor)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, investor.Investor, *gorm.DB) error); ok {
		r1 = returnFunc(ctx, ID, model, trx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIInvestorRepository_UpdateWithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWithTx'
type MockIInvestorRepository_UpdateWithTx_Call struct {
	*mock.Call
}

// UpdateWithTx is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
//   - model investor.Investor
//   - trx *gorm.DB
func (_e *MockIInvestorRepository_Expecter) UpdateWithTx(ctx interface{}, ID interface{}, model interface{}, trx interface{}) *MockIInvestorRepository_UpdateWithTx_Call {
	return &MockIInvestorRepository_UpdateWithTx_Call{Call: _e.mock.On("UpdateWithTx", ctx, ID, model, trx)}
}

func (_c *MockIInvestorRepository_UpdateWithTx_Call) Run(run func(ctx context.Context, ID uuid.UUID, model investor.Investor, trx *gorm.DB)) *MockIInvestorRepository_UpdateWithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 investor.Investor
		if args[2] != nil {
			arg2 = args[2].(investor.Investor)
		}
		var arg3 *gorm.DB
		if args[3] != nil {
			arg3 = args[3].(*gorm.DB)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockIInvestorRepository_UpdateWithTx_Call) Return(investor1 investor.Investor, err error) *MockIInvestorRepository_UpdateWithTx_Call {
	_c.Call.Return(investor1, err)
	return _c
}

func (_c *MockIInvestorRepository_UpdateWithTx_Call) RunAndReturn(run func(ctx context.Context, ID uuid.UUID, model investor.Investor, trx *gorm.DB) (investor.Investor, error)) *MockIInvestorRepository_UpdateWithTx_Call {
	_c.Call.Return(run)
	return _c
}
